classdef FrobeniousDistanceBuilder < DistanceBuilder
    % FrobeniousDistanceBuilder builds distances based on
    % the Frobenious norm between the model's Gram matrices.
    %   Detailed explanation goes here
    methods
        function obj = FrobeniousDistanceBuilder(...
                noise_prior, ...
                num_samples, ...
                max_num_hyperparameters, ...
                max_num_kernels, ...
                active_models, ...
                initial_model_indices, ...
                data_X ...
                )
            
            obj@DistanceBuilder(...
                noise_prior, ...
                num_samples, ...
                max_num_hyperparameters, ...
                max_num_kernels, ...
                active_models, ...
                initial_model_indices, ...
                data_X ...
                );
        end
        
        function dist = frobenious_distance(~,A,B, num_points)
            % average squared frobenious distance between A vs B
            dist = mean(sum((A-B).^2))/num_points;
        end
        
        function compute_distance(obj, active_models, indices_i, indices_j)
            num_points = size(active_models.models{indices_i(1)}.info,1);
            for i=indices_i
                for j=indices_j
                        dist = obj.frobenious_distance(...
                            active_models.models{i}.info, ....
                            active_models.models{j}.info, ...
                            num_points ...
                            );
                        obj.average_distance(i,j) = dist;
                        obj.average_distance(j,i) = dist;
                end
            end
        end
        
        function precomputed_info = create_precomputed_info(...
                obj, covariance, data_X ...
                )
            n = size(data_X,1);
            vectors = NaN(n^2, obj.num_samples);
            hyperparameters  = prior_sample(covariance.priors, ...
                obj.probability_samples);
            for i = 1:size(hyperparameters,1)
                hyp = hyperparameters(i,:);
                lambda = obj.hyperparameter_data_noise_samples(i);
                k = feval(covariance.function_handle{:}, hyp,  data_X);
                k = k + lambda*eye(size(k,1));
                vectors(:,i) = reshape(k, n*n,1);
            end
            precomputed_info =  vectors;
        end
    end
end

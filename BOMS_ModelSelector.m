classdef BOMS_ModelSelector < ModelSelector
    
    methods
        function obj = BOMS_ModelSelector(...
                problem, ...
                fitness_function, ...
                callback ...
                )
            
            if ~isfield(problem, 'base_kernels_names') || ...
                ~isfield(problem, 'num_dimensions') || ...
                ~isfield(problem, 'data_X')
                error('BOMS:BOMS_ModelSelector:input_error', ...
                    'base_kernels_names, num_dimensions and data_X are required');
            end            
            
            problem  = BOMS_ModelSelector.default_parameters(problem);
            
            model_space = BOMS_GrammarTraversal(...
                problem.base_kernels_names, ...
                problem.num_dimensions, ...
                problem.hyperpriors_lowlevel);
                        
            expanded_candidates = model_space.full_expand(...
                problem.initial_level_depth, ...
                problem.max_number_of_initial_models);
                    
            initial_candidates = [model_space.base_kernels, ...
                expanded_candidates];
            
            active_models = ActiveModels(problem.max_num_kernels);
            
            initial_candidate_indices = ...
                active_models.update(initial_candidates);
            
            no_duplicates = numel(initial_candidate_indices) ...
                == numel(initial_candidates);
            assert(no_duplicates);
            
            acquisition_function = problem.acquistion_function;
            
            kernel_builder = HellingerDistanceBuilder(...
                {problem.hyperpriors_kernel_kernel.gaussian_prior('lik_noise_std')}, ...
                problem.num_samples, ...
                problem.max_num_hyperparameters, ...
                problem.max_num_kernels, ...
                active_models, ...
                initial_candidate_indices, ...
                problem.data_X ...
                );
            
            tracker = SimpleTracker();
            
            strategy = BayesianOptimizationStrategy(...
                active_models, ...
                acquisition_function, ...
                kernel_builder, ...
                problem.hyperpriors_kernel_kernel, ...
                tracker);
                        
            obj@ModelSelector(...
                problem, ...
                model_space, ...
                fitness_function, ...
                strategy, ...
                callback ...
                );
        end
        
        function [selected_models, fitness_scores] = initialization(obj)
            selected_index = 1;
            selected_node = obj.strategy.active_models.models{selected_index};
            obj.strategy.active_models.selected_indices = [selected_index];

            selected_model = GpModel(...
                selected_node.covariance, ...
                obj.problem.hyperpriors_lowlevel);
            
            fitness_score = ...
                obj.fitness_function(obj.problem, selected_model);
            
            selected_models = [selected_model];
            fitness_scores = [fitness_score];
            
        end
    end
    
    methods (Static)
        function problem = default_parameters(problem)
            problem.hyperpriors_lowlevel = Hyperpriors();
            problem.hyperpriors_kernel_kernel = Hyperpriors(0.01);
            
            problem.num_samples = 20;
            problem.max_num_hyperparameters = 100;
            problem.max_num_kernels = 1000;
            
            problem.acquistion_function = @expected_improvement;
            
            problem.initial_level_depth = 2;
            problem.max_number_of_initial_models = 500;
            problem.random_walk_geometric_dist_parameter = 1/3;
            problem.number_of_top_k_best = 3;
            problem.number_of_random_walks = 15;
        end
    end
end

